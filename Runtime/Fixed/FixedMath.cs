using System.Collections;
using System.Collections.Generic;
using System;
using UnityEngine;
namespace QTool.QFixed
{
    public class ValueTable
    {
        public Fixed[] table;
        public Fixed start;
        public Fixed end;
     
        public Fixed length;
        public int keyStart;
        public int keyEnd;
        public Fixed min = Fixed.MinValue;
        public Fixed max = Fixed.MaxValue;
        public ValueTable(Fixed start, Fixed end,Fixed invStart,Fixed invEnd, Fixed[] table)
        {
            this.table = table;
            this.start = start;
            this.end = end;
            length = end - start;
            keyStart = (( invStart-start)/length * (table.Length)).ToInt();
            keyEnd = ((invEnd - start) / length * (table.Length)).ToInt();
            foreach (var value in table)
            {
                min = Fixed.Min(value, min);
            }
            foreach (var value in table)
            {
                max = Fixed.Max(value, max);
            }
        }
        public Fixed GetKey(Fixed value)
        {
            if (value < min || value > max)
            {
                throw new Exception("Value:"+value + "不在区间[" + start + "," + end + "]");
            }
            
            var key= Find(value, keyStart,keyEnd-1);
            return (key/ (table.Length-1)) * length+start;
        }
        private Fixed Find(Fixed value, int start, int end)
        {
            if (end- start  <=1)
            {
               return start+ (value-table[start])/(table[end] - table[start]);
            }
            var mid = (start + end)/2;
            var midValue = table[mid];
            if (value >= midValue)
            {
                return Find(value, mid, end);
            }
            else
            {
                return Find(value, start, mid);
            }
        }
        public Fixed GetValue(Fixed key)
        {

            while (key < start)
            {
                key += length;
            }
            while (key > end)
            {
                key -= length;
            }
  
            var t =( key-start) / length * (table.Length-1);
            var index = t.ToInt();
            if (index == t)
            {
                return table[index];
            }
            else
            {
                var nextIndex = index + 1;
                if (nextIndex>=table.Length)
                {
                    nextIndex = 0;
                }
                return MathFixed.Lerp(table[index], table[nextIndex], t - index);
            }
        }
    }
    /// <summary>
    /// 定点数数学类
    /// </summary>
    public static class MathFixed
    {

        public static Fixed ToFixed(this int x)
        {
            return new Fixed(x);
        }
        public static Fixed ToFixed(this float x)
        {
            return new Fixed(x);
        }
        public static Fixed2 ToFixed2(this UnityEngine.Vector2 v2)
        {
            return new Fixed2(v2.x, v2.y);
        }
        public static Fixed3 ToFixed3(this UnityEngine.Vector3 v3)
        {
            return new Fixed3(v3.x, v3.y, v3.z);
        }
        public static Vector3 ToVector3(this Fixed3 value)
        {
            return new Vector3(value.x.ToFloat(), value.y.ToFloat(), value.z.ToFloat());
        }
        public static Quaternion ToQuaternion(this FixedQuaternion value)
        {
            return new Quaternion(value.x.ToFloat(), value.y.ToFloat(), value.z.ToFloat(), value.w.ToFloat());
        }
        public static FixedQuaternion ToFixedQuaternion(this Quaternion value)
        {
            return new FixedQuaternion(value.x, value.y, value.z, value.w);
        }
        public static readonly Fixed PI = new Fixed(3.14159265f);
        public static readonly Fixed PIDiv2 = PI / 2;
        public static readonly Fixed PIMul2 = PI * 2;
        public static readonly Fixed PI2Rad = PI / new Fixed(180);
        public static readonly Fixed Rad2PI = new Fixed(180) / PI;
        private static readonly ValueTable sinTable = new ValueTable(-PI, PI, -PIDiv2, PIDiv2, new Fixed[] { 0.0000, -0.0175, -0.0349, -0.0523, -0.0698, -0.0872, -0.1045, -0.1219, -0.1392, -0.1564, -0.1736, -0.1908, -0.2079, -0.2250, -0.2419, -0.2588, -0.2756, -0.2924, -0.3090, -0.3256, -0.3420, -0.3584, -0.3746, -0.3907, -0.4067, -0.4226, -0.4384, -0.4540, -0.4695, -0.4848, -0.5000, -0.5150, -0.5299, -0.5446, -0.5592, -0.5736, -0.5878, -0.6018, -0.6157, -0.6293, -0.6428, -0.6561, -0.6691, -0.6820, -0.6947, -0.7071, -0.7193, -0.7314, -0.7431, -0.7547, -0.7660, -0.7771, -0.7880, -0.7986, -0.8090, -0.8192, -0.8290, -0.8387, -0.8480, -0.8572, -0.8660, -0.8746, -0.8829, -0.8910, -0.8988, -0.9063, -0.9135, -0.9205, -0.9272, -0.9336, -0.9397, -0.9455, -0.9511, -0.9563, -0.9613, -0.9659, -0.9703, -0.9744, -0.9781, -0.9816, -0.9848, -0.9877, -0.9903, -0.9925, -0.9945, -0.9962, -0.9976, -0.9986, -0.9994, -0.9998, -1.0000, -0.9998, -0.9994, -0.9986, -0.9976, -0.9962, -0.9945, -0.9925, -0.9903, -0.9877, -0.9848, -0.9816, -0.9781, -0.9744, -0.9703, -0.9659, -0.9613, -0.9563, -0.9511, -0.9455, -0.9397, -0.9336, -0.9272, -0.9205, -0.9135, -0.9063, -0.8988, -0.8910, -0.8829, -0.8746, -0.8660, -0.8572, -0.8480, -0.8387, -0.8290, -0.8192, -0.8090, -0.7986, -0.7880, -0.7771, -0.7660, -0.7547, -0.7431, -0.7314, -0.7193, -0.7071, -0.6947, -0.6820, -0.6691, -0.6561, -0.6428, -0.6293, -0.6157, -0.6018, -0.5878, -0.5736, -0.5592, -0.5446, -0.5299, -0.5150, -0.5000, -0.4848, -0.4695, -0.4540, -0.4384, -0.4226, -0.4067, -0.3907, -0.3746, -0.3584, -0.3420, -0.3256, -0.3090, -0.2924, -0.2756, -0.2588, -0.2419, -0.2250, -0.2079, -0.1908, -0.1736, -0.1564, -0.1392, -0.1219, -0.1045, -0.0872, -0.0698, -0.0523, -0.0349, -0.0175, 0.0000, 0.0175, 0.0349, 0.0523, 0.0698, 0.0872, 0.1045, 0.1219, 0.1392, 0.1564, 0.1736, 0.1908, 0.2079, 0.2250, 0.2419, 0.2588, 0.2756, 0.2924, 0.3090, 0.3256, 0.3420, 0.3584, 0.3746, 0.3907, 0.4067, 0.4226, 0.4384, 0.4540, 0.4695, 0.4848, 0.5000, 0.5150, 0.5299, 0.5446, 0.5592, 0.5736, 0.5878, 0.6018, 0.6157, 0.6293, 0.6428, 0.6561, 0.6691, 0.6820, 0.6947, 0.7071, 0.7193, 0.7314, 0.7431, 0.7547, 0.7660, 0.7771, 0.7880, 0.7986, 0.8090, 0.8192, 0.8290, 0.8387, 0.8480, 0.8572, 0.8660, 0.8746, 0.8829, 0.8910, 0.8988, 0.9063, 0.9135, 0.9205, 0.9272, 0.9336, 0.9397, 0.9455, 0.9511, 0.9563, 0.9613, 0.9659, 0.9703, 0.9744, 0.9781, 0.9816, 0.9848, 0.9877, 0.9903, 0.9925, 0.9945, 0.9962, 0.9976, 0.9986, 0.9994, 0.9998, 1.0000, 0.9998, 0.9994, 0.9986, 0.9976, 0.9962, 0.9945, 0.9925, 0.9903, 0.9877, 0.9848, 0.9816, 0.9781, 0.9744, 0.9703, 0.9659, 0.9613, 0.9563, 0.9511, 0.9455, 0.9397, 0.9336, 0.9272, 0.9205, 0.9135, 0.9063, 0.8988, 0.8910, 0.8829, 0.8746, 0.8660, 0.8572, 0.8480, 0.8387, 0.8290, 0.8192, 0.8090, 0.7986, 0.7880, 0.7771, 0.7660, 0.7547, 0.7431, 0.7314, 0.7193, 0.7071, 0.6947, 0.6820, 0.6691, 0.6561, 0.6428, 0.6293, 0.6157, 0.6018, 0.5878, 0.5736, 0.5592, 0.5446, 0.5299, 0.5150, 0.5000, 0.4848, 0.4695, 0.4540, 0.4384, 0.4226, 0.4067, 0.3907, 0.3746, 0.3584, 0.3420, 0.3256, 0.3090, 0.2924, 0.2756, 0.2588, 0.2419, 0.2250, 0.2079, 0.1908, 0.1736, 0.1564, 0.1392, 0.1219, 0.1045, 0.0872, 0.0698, 0.0523, 0.0349, 0.0175, 0.0000 });
        private static readonly ValueTable cosTable = new ValueTable(-PI, PI,-PI, 0, new Fixed[] { -1.0000, -0.9998, -0.9994, -0.9986, -0.9976, -0.9962, -0.9945, -0.9925, -0.9903, -0.9877, -0.9848, -0.9816, -0.9781, -0.9744, -0.9703, -0.9659, -0.9613, -0.9563, -0.9511, -0.9455, -0.9397, -0.9336, -0.9272, -0.9205, -0.9135, -0.9063, -0.8988, -0.8910, -0.8829, -0.8746, -0.8660, -0.8572, -0.8480, -0.8387, -0.8290, -0.8192, -0.8090, -0.7986, -0.7880, -0.7771, -0.7660, -0.7547, -0.7431, -0.7314, -0.7193, -0.7071, -0.6947, -0.6820, -0.6691, -0.6561, -0.6428, -0.6293, -0.6157, -0.6018, -0.5878, -0.5736, -0.5592, -0.5446, -0.5299, -0.5150, -0.5000, -0.4848, -0.4695, -0.4540, -0.4384, -0.4226, -0.4067, -0.3907, -0.3746, -0.3584, -0.3420, -0.3256, -0.3090, -0.2924, -0.2756, -0.2588, -0.2419, -0.2250, -0.2079, -0.1908, -0.1736, -0.1564, -0.1392, -0.1219, -0.1045, -0.0872, -0.0698, -0.0523, -0.0349, -0.0175, 0.0000, 0.0175, 0.0349, 0.0523, 0.0698, 0.0872, 0.1045, 0.1219, 0.1392, 0.1564, 0.1736, 0.1908, 0.2079, 0.2250, 0.2419, 0.2588, 0.2756, 0.2924, 0.3090, 0.3256, 0.3420, 0.3584, 0.3746, 0.3907, 0.4067, 0.4226, 0.4384, 0.4540, 0.4695, 0.4848, 0.5000, 0.5150, 0.5299, 0.5446, 0.5592, 0.5736, 0.5878, 0.6018, 0.6157, 0.6293, 0.6428, 0.6561, 0.6691, 0.6820, 0.6947, 0.7071, 0.7193, 0.7314, 0.7431, 0.7547, 0.7660, 0.7771, 0.7880, 0.7986, 0.8090, 0.8192, 0.8290, 0.8387, 0.8480, 0.8572, 0.8660, 0.8746, 0.8829, 0.8910, 0.8988, 0.9063, 0.9135, 0.9205, 0.9272, 0.9336, 0.9397, 0.9455, 0.9511, 0.9563, 0.9613, 0.9659, 0.9703, 0.9744, 0.9781, 0.9816, 0.9848, 0.9877, 0.9903, 0.9925, 0.9945, 0.9962, 0.9976, 0.9986, 0.9994, 0.9998, 1.0000, 0.9998, 0.9994, 0.9986, 0.9976, 0.9962, 0.9945, 0.9925, 0.9903, 0.9877, 0.9848, 0.9816, 0.9781, 0.9744, 0.9703, 0.9659, 0.9613, 0.9563, 0.9511, 0.9455, 0.9397, 0.9336, 0.9272, 0.9205, 0.9135, 0.9063, 0.8988, 0.8910, 0.8829, 0.8746, 0.8660, 0.8572, 0.8480, 0.8387, 0.8290, 0.8192, 0.8090, 0.7986, 0.7880, 0.7771, 0.7660, 0.7547, 0.7431, 0.7314, 0.7193, 0.7071, 0.6947, 0.6820, 0.6691, 0.6561, 0.6428, 0.6293, 0.6157, 0.6018, 0.5878, 0.5736, 0.5592, 0.5446, 0.5299, 0.5150, 0.5000, 0.4848, 0.4695, 0.4540, 0.4384, 0.4226, 0.4067, 0.3907, 0.3746, 0.3584, 0.3420, 0.3256, 0.3090, 0.2924, 0.2756, 0.2588, 0.2419, 0.2250, 0.2079, 0.1908, 0.1736, 0.1564, 0.1392, 0.1219, 0.1045, 0.0872, 0.0698, 0.0523, 0.0349, 0.0175, 0.0000, -0.0175, -0.0349, -0.0523, -0.0698, -0.0872, -0.1045, -0.1219, -0.1392, -0.1564, -0.1736, -0.1908, -0.2079, -0.2250, -0.2419, -0.2588, -0.2756, -0.2924, -0.3090, -0.3256, -0.3420, -0.3584, -0.3746, -0.3907, -0.4067, -0.4226, -0.4384, -0.4540, -0.4695, -0.4848, -0.5000, -0.5150, -0.5299, -0.5446, -0.5592, -0.5736, -0.5878, -0.6018, -0.6157, -0.6293, -0.6428, -0.6561, -0.6691, -0.6820, -0.6947, -0.7071, -0.7193, -0.7314, -0.7431, -0.7547, -0.7660, -0.7771, -0.7880, -0.7986, -0.8090, -0.8192, -0.8290, -0.8387, -0.8480, -0.8572, -0.8660, -0.8746, -0.8829, -0.8910, -0.8988, -0.9063, -0.9135, -0.9205, -0.9272, -0.9336, -0.9397, -0.9455, -0.9511, -0.9563, -0.9613, -0.9659, -0.9703, -0.9744, -0.9781, -0.9816, -0.9848, -0.9877, -0.9903, -0.9925, -0.9945, -0.9962, -0.9976, -0.9986, -0.9994, -0.9998, -1.0000 });
        private static readonly ValueTable tanTable = new ValueTable(-PI, PI, -PIDiv2, PIDiv2, new Fixed[] { 0.0000, 0.0175, 0.0349, 0.0524, 0.0699, 0.0875, 0.1051, 0.1228, 0.1405, 0.1584, 0.1763, 0.1944, 0.2126, 0.2309, 0.2493, 0.2679, 0.2867, 0.3057, 0.3249, 0.3443, 0.3640, 0.3839, 0.4040, 0.4245, 0.4452, 0.4663, 0.4877, 0.5095, 0.5317, 0.5543, 0.5774, 0.6009, 0.6249, 0.6494, 0.6745, 0.7002, 0.7265, 0.7536, 0.7813, 0.8098, 0.8391, 0.8693, 0.9004, 0.9325, 0.9657, 1.0000, 1.0355, 1.0724, 1.1106, 1.1504, 1.1918, 1.2349, 1.2799, 1.3270, 1.3764, 1.4281, 1.4826, 1.5399, 1.6003, 1.6643, 1.7321, 1.8040, 1.8807, 1.9626, 2.0503, 2.1445, 2.2460, 2.3559, 2.4751, 2.6051, 2.7475, 2.9042, 3.0777, 3.2709, 3.4874, 3.7321, 4.0108, 4.3315, 4.7046, 5.1446, 5.6713, 6.3138, 7.1154, 8.1443, 9.5144, 11.4301, 14.3007, 19.0811, 28.6363, 57.2900, -16331239353195400.0000, -57.2900, -28.6363, -19.0811, -14.3007, -11.4301, -9.5144, -8.1443, -7.1154, -6.3138, -5.6713, -5.1446, -4.7046, -4.3315, -4.0108, -3.7321, -3.4874, -3.2709, -3.0777, -2.9042, -2.7475, -2.6051, -2.4751, -2.3559, -2.2460, -2.1445, -2.0503, -1.9626, -1.8807, -1.8040, -1.7321, -1.6643, -1.6003, -1.5399, -1.4826, -1.4281, -1.3764, -1.3270, -1.2799, -1.2349, -1.1918, -1.1504, -1.1106, -1.0724, -1.0355, -1.0000, -0.9657, -0.9325, -0.9004, -0.8693, -0.8391, -0.8098, -0.7813, -0.7536, -0.7265, -0.7002, -0.6745, -0.6494, -0.6249, -0.6009, -0.5774, -0.5543, -0.5317, -0.5095, -0.4877, -0.4663, -0.4452, -0.4245, -0.4040, -0.3839, -0.3640, -0.3443, -0.3249, -0.3057, -0.2867, -0.2679, -0.2493, -0.2309, -0.2126, -0.1944, -0.1763, -0.1584, -0.1405, -0.1228, -0.1051, -0.0875, -0.0699, -0.0524, -0.0349, -0.0175, 0.0000, 0.0175, 0.0349, 0.0524, 0.0699, 0.0875, 0.1051, 0.1228, 0.1405, 0.1584, 0.1763, 0.1944, 0.2126, 0.2309, 0.2493, 0.2679, 0.2867, 0.3057, 0.3249, 0.3443, 0.3640, 0.3839, 0.4040, 0.4245, 0.4452, 0.4663, 0.4877, 0.5095, 0.5317, 0.5543, 0.5774, 0.6009, 0.6249, 0.6494, 0.6745, 0.7002, 0.7265, 0.7536, 0.7813, 0.8098, 0.8391, 0.8693, 0.9004, 0.9325, 0.9657, 1.0000, 1.0355, 1.0724, 1.1106, 1.1504, 1.1918, 1.2349, 1.2799, 1.3270, 1.3764, 1.4281, 1.4826, 1.5399, 1.6003, 1.6643, 1.7321, 1.8040, 1.8807, 1.9626, 2.0503, 2.1445, 2.2460, 2.3559, 2.4751, 2.6051, 2.7475, 2.9042, 3.0777, 3.2709, 3.4874, 3.7321, 4.0108, 4.3315, 4.7046, 5.1446, 5.6713, 6.3138, 7.1154, 8.1443, 9.5144, 11.4301, 14.3007, 19.0811, 28.6363, 57.2900, 16331239353195400.0000, -57.2900, -28.6363, -19.0811, -14.3007, -11.4301, -9.5144, -8.1443, -7.1154, -6.3138, -5.6713, -5.1446, -4.7046, -4.3315, -4.0108, -3.7321, -3.4874, -3.2709, -3.0777, -2.9042, -2.7475, -2.6051, -2.4751, -2.3559, -2.2460, -2.1445, -2.0503, -1.9626, -1.8807, -1.8040, -1.7321, -1.6643, -1.6003, -1.5399, -1.4826, -1.4281, -1.3764, -1.3270, -1.2799, -1.2349, -1.1918, -1.1504, -1.1106, -1.0724, -1.0355, -1.0000, -0.9657, -0.9325, -0.9004, -0.8693, -0.8391, -0.8098, -0.7813, -0.7536, -0.7265, -0.7002, -0.6745, -0.6494, -0.6249, -0.6009, -0.5774, -0.5543, -0.5317, -0.5095, -0.4877, -0.4663, -0.4452, -0.4245, -0.4040, -0.3839, -0.3640, -0.3443, -0.3249, -0.3057, -0.2867, -0.2679, -0.2493, -0.2309, -0.2126, -0.1944, -0.1763, -0.1584, -0.1405, -0.1228, -0.1051, -0.0875, -0.0699, -0.0524, -0.0349, -0.0175, 0.0000 });
      
        public static Fixed Lerp(Fixed a, Fixed b, Fixed t)
        {
            return a + (b - a) * t;
        }
        public static Fixed PiToAngel(Fixed pi)
        {
            return pi / PI * 180;
        }
     
      
        public static Fixed Abs(Fixed ratio)
        {
            return Fixed.Abs(ratio);
        }
        public static Fixed Sqrt(Fixed r)
        {
            return Fixed.Sqrt(r);
        }
        public static Fixed Clamp(Fixed value,Fixed min,Fixed max)
        {
            if (value < min)
            {
                return min;
            }
            else if(value> max)
            {
                return max;
            }
            else
            {
                return value;
            }
        }
        public static Fixed Sin(Fixed r)
        {
            return sinTable.GetValue(r);
        }
        public static Fixed Asin(Fixed sin)
        {
            return sinTable.GetKey(sin);
        }

        public static Fixed Cos(Fixed r)
        {
            return cosTable.GetValue(r);
        }
        public static Fixed Acos(Fixed value)
        {
            return - cosTable.GetKey(value);
        }
        public static Fixed Tan(Fixed r)
        {
            return tanTable.GetValue(r);
        }
        public static Fixed Atan(Fixed r)
        {
            return tanTable.GetKey(r);
        }
        public static Fixed Atan2(Fixed y, Fixed x)
        {
            return Atan(y/x);
        }
    }
  
}
